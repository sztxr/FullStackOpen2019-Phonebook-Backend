{"version":3,"sources":["services/contact.js","components/Form.js","components/Filter.js","components/Contact.js","components/Contacts.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","Form","onSubmit","name","phone","type","value","onChange","className","Filter","Contact","contact","deleteContact","onClick","Contacts","contacts","map","key","Notification","notification","style","backgroundColor","message","App","useState","setContacts","newName","setNewName","newPhone","setNewPhone","filter","setFilter","setNotification","useEffect","contactServices","initialContacts","showNotification","setTimeout","showContacts","item","toLowerCase","includes","e","target","preventDefault","returnedContact","catch","err","console","log","error","find","c","window","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db41e41a.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/contacts'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Form = ({ onSubmit, name, phone }) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        Name: <input type=\"text\" value={name.value} name=\"name\" onChange={name.onChange} />\n        <br/>\n        Phone: <input type=\"text\" value={phone.value} name=\"phone\" onChange={phone.onChange} />\n      </div>\n      <div>\n        <button className=\"btn btn-primary\" type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default Form","import React from 'react'\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <p>Search: <input value={value} onChange={onChange} /></p>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst Contact = ({ contact, deleteContact }) => {\n  return (\n    <li className=\"contact\">\n      <strong>{contact.name}</strong> &ndash; {contact.phone}\n      <button className=\"btn btn-secondary\" onClick={deleteContact}>delete</button>\n    </li>\n  )\n}\n\nexport default Contact","import React from 'react'\nimport Contact from './Contact'\n\nconst Contacts = ({ contacts, deleteContact }) => {\n  const contactComponent = () => contacts.map(contact =>\n    <Contact\n      key={contact.id}\n      contact={contact}\n      deleteContact={() => deleteContact(contact.id)}\n    />\n  )\n\n  return (\n    <ul>{contactComponent()}</ul>\n  )\n}\n\nexport default Contacts","import React from 'react'\n\nconst Notification = ({ notification }) => {\n  // console.log(notification)\n  const style = {\n    backgroundColor: notification.type === 'success' ? '#58ae5a' : '#b92834'\n  }\n\n  if (notification.message === null) return null\n\n  return (\n    <div className='notification' style={style}>\n      {notification.message}\n    </div>\n  )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport contactServices from './services/contact'\nimport Form from './components/Form'\nimport Filter from './components/Filter'\nimport Contacts from './components/Contacts'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [contacts, setContacts] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhone, setNewPhone] = useState('')\n  const [filter, setFilter] = useState('')\n  const [notification, setNotification] = useState({ message: null })\n\n  useEffect(() => {\n    contactServices\n      .getAll()\n      .then(initialContacts => {\n        // console.log(initialContacts)\n        setContacts(initialContacts)\n      })\n  }, [])\n\n  const addContact = e => {\n    e.preventDefault()\n\n    // const all = contacts.map(item => item.name)\n    const contactObj = {\n      name: newName,\n      phone: newPhone\n    }\n\n    // if (all.includes(newName)) {\n    //   const contact = contacts.find(item => item.name === newName)\n\n    //   if (window.confirm(`Contact ${newName} already exist, replace old phone number with one?`)) {\n    //     contactServices\n    //       .update(contact.id, contactObj)\n    //       .then(returnedContact => {\n    //         // console.log(returnedContact)\n    //         setContacts(contacts.map(item => item.name !== newName ? item : returnedContact))\n    //         setNewName('')\n    //         setNewPhone('')\n    //         showNotification(`Success: '${newName}' has been updated`, 'success')\n    //       })\n    //       .catch(err => {\n    //         setContacts(contacts.filter(item => item.id !== newName.id))\n    //         showNotification(`Error: '${newName}' does not exist`, 'error')\n    //       })\n    //   }\n    //   return\n    // }\n\n    contactServices\n      .create(contactObj)\n      .then(returnedContact => {\n        setContacts([...contacts, returnedContact])\n        setNewName('')\n        setNewPhone('')\n        showNotification(`Success: '${newName}' has been added to the phone book'`, 'success')\n      })\n      .catch(err => {\n        console.log(err.response.data)\n        showNotification(`Error: ${err.response.data.error}`, 'error')\n      })\n  }\n\n  const deleteContact = id => {\n    const contact = contacts.find(c => c.id === id)\n\n    if (window.confirm(`Delete ${contact.name}?`)) {\n      contactServices\n        .remove(contact.id)\n        .then(() => {\n          setContacts(contacts.filter(item => item.id !== id))\n          showNotification(`Success: '${contact.name}' has been deleted from the phone book`, 'success')\n        })\n        .catch(err => {\n          setContacts(contacts.filter(item => item.id !== id))\n          showNotification(`Error: '${contact.name}' does not exist`, 'error')\n        })\n    }\n  }\n\n  const showNotification = (message, type = 'success') => {\n    setNotification({ message, type })\n    setTimeout(() => {\n      setNotification({ message: null })\n    }, 5000)\n  }\n\n  const handleNameChange = e => {\n    setNewName(e.target.value)\n  }\n\n  const handlePhoneChange = e => {\n    setNewPhone(e.target.value)\n  }\n\n  const handleSearch = e => {\n    setFilter(e.target.value)\n  }\n\n  const showContacts = filter === ''\n    ? contacts\n    : contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification notification={notification} />\n\n      <Filter value={filter} onChange={handleSearch} />\n\n      <h2>Add a new contact</h2>\n      <Form\n        onSubmit={addContact}\n        name={{ value: newName, onChange: handleNameChange }}\n        phone={{ value: newPhone, onChange: handlePhoneChange }}\n      />\n\n      <h2>Numbers</h2>\n      <Contacts contacts={showContacts} deleteContact={deleteContact} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}